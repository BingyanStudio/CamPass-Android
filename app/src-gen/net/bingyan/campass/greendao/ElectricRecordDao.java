package net.bingyan.campass.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ELECTRIC_RECORD.
*/
public class ElectricRecordDao extends AbstractDao<ElectricRecord, Long> {

    public static final String TABLENAME = "ELECTRIC_RECORD";

    /**
     * Properties of entity ElectricRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Area = new Property(1, String.class, "area", false, "AREA");
        public final static Property Building = new Property(2, Integer.class, "building", false, "BUILDING");
        public final static Property Dorm = new Property(3, Integer.class, "dorm", false, "DORM");
        public final static Property Remain = new Property(4, Float.class, "remain", false, "REMAIN");
        public final static Property Date = new Property(5, java.util.Date.class, "date", false, "DATE");
    };


    public ElectricRecordDao(DaoConfig config) {
        super(config);
    }
    
    public ElectricRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ELECTRIC_RECORD' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'AREA' TEXT," + // 1: area
                "'BUILDING' INTEGER," + // 2: building
                "'DORM' INTEGER," + // 3: dorm
                "'REMAIN' REAL," + // 4: remain
                "'DATE' INTEGER);"); // 5: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ELECTRIC_RECORD'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ElectricRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(2, area);
        }
 
        Integer building = entity.getBuilding();
        if (building != null) {
            stmt.bindLong(3, building);
        }
 
        Integer dorm = entity.getDorm();
        if (dorm != null) {
            stmt.bindLong(4, dorm);
        }
 
        Float remain = entity.getRemain();
        if (remain != null) {
            stmt.bindDouble(5, remain);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(6, date.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ElectricRecord readEntity(Cursor cursor, int offset) {
        ElectricRecord entity = new ElectricRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // area
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // building
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // dorm
            cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4), // remain
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)) // date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ElectricRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setArea(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBuilding(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setDorm(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setRemain(cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4));
        entity.setDate(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ElectricRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ElectricRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
